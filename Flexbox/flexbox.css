/* 

**** What is Flexbox?
flex containers and flex items.
To designate an element as a flex container, set the element’s display property to flex or inline-flex. 
Once an item is a flex container, there are several properties we can use to specify how its children behave.
flex containers have two axes: a main axis and a cross axis. 
By default, the main axis is horizontal and the cross axis is vertical.


**** display: flex
div.container {
  display: flex;
}
all divs with the class container are flex containers. If they have children, the children are flex items. 
A div with the declaration display: flex; will remain block level

**** inline-flex
<div class='container'>
  <p>I’m inside of a flex container!</p>
  <p>A flex container’s children are flex items!</p>
</div>
<div class='container'>
  <p>I’m also a flex item!</p>
  <p>Me too!</p>
</div>

CSS:  
.container {
  width: 200px;
  height: 200px;
  display: inline-flex;
}

Without a width, each div would stretch the entire width of the page. 
The paragraphs within each div would also display on top of each other because paragraphs are block-level elements.
the divs will display inline with each other if the page is wide enough. 

**** justify-content
.container {
  display: flex;
  justify-content: flex-end;
}
This will cause all of the flex items to shift to the right side of the flex container.

commonly used values for the justify-content property:

flex-start — all items will be positioned in order, starting from the left of the parent container, with no extra space between or before them.
flex-end — all items will be positioned in order, with the last item starting on the right side of the parent container, with no extra space between or after them.
center — all items will be positioned in order, in the center of the parent container with no extra space before, between, or after them.
space-around — items will be positioned with equal space before and after each item, resulting in double the space between elements.
space-between — items will be positioned with equal space between them, but no extra space before the first or after the last elements.




**** align-items
It is also possible to align flex items vertically within the container. 
The align-items property makes it possible to space flex items vertically.

.container {
  align-items: baseline;
}

values for the align-items property:

flex-start — all elements will be positioned at the top of the parent container.
flex-end — all elements will be positioned at the bottom of the parent container.
center — the center of all elements will be positioned halfway between the top and bottom of the parent container.
baseline — the bottom of the content of all items will be aligned with each other.
stretch — if possible, the items will stretch from top to bottom of the container (this is the default value; elements with a specified height will not stretch; elements with a minimum height or no height specified will stretch).

**** flex-grow
The flex-grow property allows us to specify if items should grow to fill a container 
and also which items should grow proportionally more or less than others.

.container {
  display: flex;
}
 
.side {
  width: 100px;
  flex-grow: 1;
}
 
.center {
  width: 100px;
  flex-grow: 2;
}

**** flex-shrink
Same. flex-shrink property can be used to specify which elements will shrink and in what proportions.

.container {
  display: flex;
}
 
.side {
  width: 100px;
  flex-shrink: 1;
}
 
.center {
  width: 100px;
  flex-shrink: 2;
}

As with flex-grow, flex-shrink will only be employed if the parent container is too small or the browser is adjusted.

**** flex-basis
flex-basis allows us to specify the width of an item before it stretches or shrinks.

.container {
  display: flex;
}
 
.side {
  flex-grow: 1;
  flex-basis: 100px;
}
 
.center {
  flex-grow: 2;
  flex-basis: 150px;
}

 If the .container div is larger, the .center div will absorb twice as much space as the .side divs.

**** flex
The flex property allows you to declare flex-grow, flex-shrink, and flex-basis all in one line.

.big {
  flex-grow: 2;
  flex-shrink: 1;
  flex-basis: 150px;
}
 
.small {
  flex-grow: 1;
  flex-shrink: 2;
  flex-basis: 100px;
}

OR

.big {
  flex: 2 1 150px;
}
 
.small {
  flex: 1 2 100px;
}
declares the values for flex-grow, flex-shrink, and flex-basis 

.big {
 flex: 2 1;
}
declare flex-grow and flex-shrink, but not flex-basis.

.small {
  flex: 1 20px;
}
declare flex-grow and flex-basis. Note that there is no way to set only flex-shrink and flex-basis using 2 values.

**** flex-wrap
Note: The flex-wrap property is declared on flex containers.
The flex-wrap property can accept three values:

wrap — child elements of a flex container that don’t fit into a row will move down to the next line
wrap-reverse — the same functionality as wrap, but the order of rows within a flex container is reversed (for example, in a 2-row flexbox, the first row from a wrap container will become the second in wrap-reverse and the second row from the wrap container will become the first in wrap-reverse)
nowrap — prevents items from wrapping; this is the default value and is only necessary to override a wrap value set by a different CSS rule.


**** align-content
The align-content property is declared on flex containers.
align-items is for aligning elements within a single row. 
If a flex container has multiple rows of content withitn its row, we can use align-content to space the rows from top to bottom.

commonly used align-content values:

flex-start — all rows of elements will be positioned at the top of the parent container with no extra space between.
flex-end — all rows of elements will be positioned at the bottom of the parent container with no extra space between.
center — all rows of elements will be positioned at the center of the parent element with no extra space between.
space-between — all rows of elements will be spaced evenly from the top to the bottom of the container with no space above the first or below the last.
space-around — all rows of elements will be spaced evenly from the top to the bottom of the container with the same amount of space at the top and bottom and between each element.
stretch — if a minimum height or no height is specified, the rows of elements will stretch to fill the parent container from top to bottom (default value).


**** flex-direction
The flex-direction property is declared on flex containers.
main axis and a cross axis. 

The main axis is used to position flex items with the following properties:
justify-content
flex-wrap
flex-grow
flex-shrink

The cross axis is used to position flex items with the following properties:
align-items
align-content

We can switch them using the flex-direction property.
.container {
  display: flex;
  flex-direction: column;
  width: 1000px;
}
.item {
  height: 100px;
  width: 100px;
}
the five divs will be positioned in a vertical column. 


The flex-direction property can accept four values:
row — elements will be positioned from left to right across the parent element starting from the top left corner (default).
row-reverse — elements will be positioned from right to left across the parent element starting from the top right corner.
column — elements will be positioned from top to bottom of the parent element starting from the top left corner.
column-reverse — elements will be positioned from the bottom to the top of the parent element starting from the bottom left corner.


**** flex-flow
The flex-flow property is declared on flex containers.
the shorthand flex-flow property is used to declare both the flex-wrap and flex-direction properties in one line.

.container {
  display: flex;
  flex-wrap: wrap;
  flex-direction: column;
}

OR

.container {
  display: flex;
  flex-flow: column wrap;
}
flex-direction value and the second is a flex-wrap value



**** Nested Flexboxes
It is also possible to position flex containers inside of one another.


**** Review: Flexbox
display: flex changes an element to a block-level container with flex items inside of it.
display: inline-flex allows multiple flex containers to appear inline with each other.
justify-content is used to space items along the main axis.
align-items is used to space items along the cross axis.
flex-grow is used to specify how much space (and in what proportions) flex items absorb along the main axis.
flex-shrink is used to specify how much flex items shrink and in what proportions along the main axis.
flex-basis is used to specify the initial size of an element styled with flex-grow and/or flex-shrink.
flex is used to specify flex-grow, flex-shrink, and flex-basis in one declaration.
flex-wrap specifies that elements should shift along the cross axis if the flex container is not large enough.
align-content is used to space rows along the cross axis.
flex-direction is used to specify the main and cross axes.
flex-flow is used to specify flex-wrap and flex-direction in one declaration.
Flex containers can be nested inside of each other by declaring display: flex or display: inline-flex for children of flex containers.


*/